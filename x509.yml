apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: heuristic-galileo-e56001
spec:
    color: '#326BBA'
    name: x509
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: rustic-clarke-e56005
spec:
    associations:
      - kind: Label
        name: heuristic-galileo-e56001
    name: x509
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: serene-northcutt-a56001
spec:
    associations:
      - kind: Label
        name: heuristic-galileo-e56001
    charts:
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 6
        kind: Single_Stat
        name: Nros de Certificados
        queries:
          - query: |-
                from(bucket: "x509")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "x509_cert")
                  |> filter(fn: (r) => r["_field"] == "expiry")
                  |> count()
                  |> yield(name: "count")
        width: 2
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
          - hex: '#BF3D5E'
            name: ruby
            type: text
          - hex: '#4ED8A0'
            name: rainforest
            type: text
            value: 15
        height: 3
        kind: Single_Stat
        name: CodigoSur.org - Expire in
        queries:
          - query: |-
                from(bucket: "x509")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "x509_cert")
                  |> filter(fn: (r) => r["_field"] == "expiry")
                  |> filter(fn: (r) => r["common_name"] == "codigosur.org")
                  |> last()
                  |> map(fn: (r) => ({r with _value: r._value / 86400}))
        suffix: ' days'
        width: 2
        xPos: 2
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
          - hex: '#BF3D5E'
            name: ruby
            type: text
          - hex: '#4ED8A0'
            name: rainforest
            type: text
            value: 15
        height: 3
        kind: Single_Stat
        name: monitoreo.CS - Expire in
        queries:
          - query: |-
                from(bucket: "x509")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "x509_cert")
                  |> filter(fn: (r) => r["_field"] == "expiry")
                  |> filter(fn: (r) => r["common_name"] == "monitoreo.codigosur.org")
                  |> last()
                  |> map(fn: (r) => ({r with _value: r._value / 86400}))
        suffix: ' days'
        width: 2
        xPos: 4
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
          - hex: '#BF3D5E'
            name: ruby
            type: text
          - hex: '#4ED8A0'
            name: rainforest
            type: text
            value: 15
        height: 3
        kind: Single_Stat
        name: pad.CS - Expire in
        queries:
          - query: |-
                from(bucket: "x509")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "x509_cert")
                  |> filter(fn: (r) => r["_field"] == "expiry")
                  |> filter(fn: (r) => r["common_name"] == "pad.codigosur.org")
                  |> last()
                  |> map(fn: (r) => ({r with _value: r._value / 86400}))
        suffix: ' days'
        width: 2
        xPos: 6
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
          - hex: '#BF3D5E'
            name: ruby
            type: text
          - hex: '#4ED8A0'
            name: rainforest
            type: text
            value: 15
        height: 3
        kind: Single_Stat
        name: nube.CS - Expire in
        queries:
          - query: |-
                from(bucket: "x509")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "x509_cert")
                  |> filter(fn: (r) => r["_field"] == "expiry")
                  |> filter(fn: (r) => r["common_name"] == "nube.codigosur.org")
                  |> last()
                  |> map(fn: (r) => ({r with _value: r._value / 86400}))
        suffix: ' days'
        width: 2
        xPos: 8
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
          - hex: '#BF3D5E'
            name: ruby
            type: text
          - hex: '#4ED8A0'
            name: rainforest
            type: text
            value: 15
        height: 3
        kind: Single_Stat
        name: git.CS - Expire in
        queries:
          - query: |-
                from(bucket: "x509")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "x509_cert")
                  |> filter(fn: (r) => r["_field"] == "expiry")
                  |> filter(fn: (r) => r["common_name"] == "git.codigosur.org")
                  |> last()
                  |> map(fn: (r) => ({r with _value: r._value / 86400}))
        suffix: ' days'
        width: 2
        xPos: 10
    name: x509 - SSL Expiration Monitor

---

apiVersion: influxdata.com/v2alpha1
kind: Telegraf
metadata:
    name: x509
spec:
    config: |
        # Telegraf Configuration
        #
        # Telegraf is entirely plugin driven. All metrics are gathered from the
        # declared inputs, and sent to the declared outputs.
        #
        # Plugins must be declared in here to be active.
        # To deactivate a plugin, comment out the name and any variables.
        #
        # Use 'telegraf -config telegraf.conf -test' to see what metrics a config
        # file would generate.
        #
        # Environment variables can be used anywhere in this config file, simply surround
        # them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
        # for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})
        
        
        # Global tags can be specified here in key="value" format.
        [global_tags]
        # dc = "us-east-1" # will tag all metrics with dc=us-east-1
        # rack = "1a"
        ## Environment variables can be used as tags, and throughout the config file
        # user = "$USER"
        
        
        # Configuration for telegraf agent
        [agent]
        ## Default data collection interval for all inputs
        interval = "12h"
        ## Rounds collection interval to 'interval'
        ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
        round_interval = true
        
        ## Telegraf will send metrics to outputs in batches of at most
        ## metric_batch_size metrics.
        ## This controls the size of writes that Telegraf sends to output plugins.
        metric_batch_size = 1000
        
        ## Maximum number of unwritten metrics per output.  Increasing this value
        ## allows for longer periods of output downtime without dropping metrics at the
        ## cost of higher maximum memory usage.
        metric_buffer_limit = 10000
        
        ## Collection jitter is used to jitter the collection by a random amount.
        ## Each plugin will sleep for a random time within jitter before collecting.
        ## This can be used to avoid many plugins querying things like sysfs at the
        ## same time, which can have a measurable effect on the system.
        collection_jitter = "0s"
        
        ## Default flushing interval for all outputs. Maximum flush_interval will be
        ## flush_interval + flush_jitter
        flush_interval = "10s"
        ## Jitter the flush interval by a random amount. This is primarily to avoid
        ## large write spikes for users running a large number of telegraf instances.
        ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
        flush_jitter = "0s"
        
        ## By default or when set to "0s", precision will be set to the same
        ## timestamp order as the collection interval, with the maximum being 1s.
        ##   ie, when interval = "10s", precision will be "1s"
        ##       when interval = "250ms", precision will be "1ms"
        ## Precision will NOT be used for service inputs. It is up to each individual
        ## service input to set the timestamp at the appropriate precision.
        ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
        precision = ""
        
        ## Log at debug level.
        # debug = false
        ## Log only error level messages.
        # quiet = false
        
        ## Log target controls the destination for logs and can be one of "file",
        ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
        ## is determined by the "logfile" setting.
        # logtarget = "file"
        
        ## Name of the file to be logged to when using the "file" logtarget.  If set to
        ## the empty string then logs are written to stderr.
        # logfile = ""
        
        ## The logfile will be rotated after the time interval specified.  When set
        ## to 0 no time based rotation is performed.  Logs are rotated only when
        ## written to, if there is no log activity rotation may be delayed.
        # logfile_rotation_interval = "0d"
        
        ## The logfile will be rotated when it becomes larger than the specified
        ## size.  When set to 0 no size based rotation is performed.
        # logfile_rotation_max_size = "0MB"
        
        ## Maximum number of rotated archives to keep, any older logs are deleted.
        ## If set to -1, no archives are removed.
        # logfile_rotation_max_archives = 5
        
        ## Override default hostname, if empty use os.Hostname()
        hostname = ""
        ## If set to true, do no set the "host" tag in the telegraf agent.
        omit_hostname = false
        
        
        ###############################################################################
        #                            OUTPUT PLUGINS                                   #
        ###############################################################################
        [[outputs.influxdb_v2]]
          ## The URLs of the InfluxDB cluster nodes.
          ##
          ## Multiple URLs can be specified for a single cluster, only ONE of the
          ## urls will be written to each interval.
          ## urls exp: http://127.0.0.1:9999
          #urls = ["$INFLUX_HOST"]
          url = ["https://monitoreo.codigosur.org"]

          ## Token for authentication.
          token = "$INFLUX_TOKEN"

          ## Organization is the name of the organization you wish to write to; must exist.
          organization = "$INFLUX_ORG"
          organization = "codigosur"

          ## Destination bucket to write into.
          #bucket = "$INFLUX_BUCKET"
          bucket = "x509"

        # Reads metrics from a SSL certificates
        [[inputs.x509_cert]]

          ## List certificate sources
          sources = ["https://codigosur.org:443", "https://monitoreo.codigosur.org:443", "https://nube.codigosur.org:443", "https://git.codigosur.org:443", "https://padcodigosur.org:443"]

          ## Timeout for SSL connection
          # timeout = "5s"

          ## Pass a different name into the TLS request (Server Name Indication)
          ##   example: server_name = "myhost.example.org"
          # server_name = "myhost.example.org"

          ## Optional TLS Config
          # tls_ca = "/etc/telegraf/ca.pem"
          # tls_cert = "/etc/telegraf/cert.pem"
          # tls_key = "/etc/telegraf/key.pem"